= Niveau 3
:toc: right
:toc-title: Niveau 3
:icons: font

L’objet du niveau 3 est de découvrir l’API qui permet de faire ces choses que seuls les processeurs d'annotations peuvent faire: lever de nouvelles erreurs ou avertissements de compilation et/ou créer de nouveaux fichiers sources, classes ou ressources pendant la compilation.

== exo 2: générer un fichier

L'objectif de cet exercice est de générer un fichier dans lequel figurera le prénom des personnages décédés du livre Game of Thrones.

Dans le répertoire `exo2`, vous trouverez un projet Maven constitué de deux sous modules:

* dans le module `processor` se trouvent l'annotation `Character` et le processor `UndertakerProcessor`
* dans le module `subject` se trouvent les membres des familles Baratheon et Stark.
 Chaque personnage est représenté par une classe, dont le nom est le prénom du personnage, annotée avec l'annotation `Character`.

L'annotation `Character` définie un membre `dead` de type `boolean` qui permet de savoir si le personnage est mort (ou pas... encore).

=== étape 1: récupérer une annotation

Le première étape de l'exercice consiste à lire les informations contenues dans les sources dans le contexte d'un processor.

Les deux informations qui nous intéressent: la valeur du membre `dead` de l'annotation `Character` et le nom de la classe annotée.

[IMPORTANT]
====
Dans la classe `UndertakerProcessor`, implémentez la méthode `collectDeadCharactersFirstNames`.

Pour cela, vous devrez:

1. récupérez le `TypeElement` de l'annotation `@Character` parmis les paramètres de la méthode `init` (puisque le procesor n'"écoute" qu'une seule annotation, c'est très simple)
2. récupérez les `Element` des classes annotées avec `@Character` du `RoundEnvironnement` courant (TODO lien DOC RoundEnvironnement)
3. récupérez l'annotation `@Character` de chaque element afin de savoir si le personnage courant est mort ou pas (TODO lien doc Element)
4. récupérez le nom de la classe et l'ajouter à la propriété `deadCharacterFirstnames`

Si votre implémentation est correcte, le test unitaire `DeadCharacterSetTest` sera passant.
====

=== étape 2: écrire un fichier

La seconde étape de l'exercice se consacre à la génération du fichier `dead_characters.txt` dans le package `fr.devoxx.niveau3.exo2`.

Dans le cadre du traitement d'annotations, l'écriture de fichiers (fichier source, classe ou ressource quelconque) se fait par le biais de l'interface `javax.annotation.processing.Filer`. Une instance peut être récupérée via la méthode `getFiler()` de l'instance de `javax.annotation.processing.ProcessingEnvironment` fournie en paramètre de la méthode `init(ProcessingEnvironment)` du processor.

[IMPORTANT]
====
Dans la classe `UndertakerProcessor`, implémentez la méthode `generateListing`.

Pour cela, vous devrez:

1. créer une instance de `javax.tools.FileObject` grâce à une méthode de l'interface `javax.annotation.processing.Filer` pour le fichier `dead_characters.txt` dans le package `fr.devoxx.niveau3.exo2`
2. ouvrir un `Writer` ou un `OutputStream`
3. écrire chaques valeurs de la propriété `deadCharacterFirstnames` dans le fichier (une valeur par ligne)

Si votre implémentation est correcte, le test unitaire `DeadCharacterFileTest` sera passant.
====
