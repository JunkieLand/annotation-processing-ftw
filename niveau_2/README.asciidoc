= Niveau 2
:toc: right
:toc-title: Niveau 2
:icons: font

L'objet du niveau 2 est de découvrir l'API qui modélise le code source Java sur lequel reposera tout traitement d'annotation (ou presque) via un Processor.


== exo 1: déclaration de classe et distinction Element/TypeMirror

Le premier exercice se concentre sur la modélisation de la déclaration d'une classe et la compréhension de la distinction entre `Element` et `TypeMirror`.

Pour rappel, un `Element` représentera un élément du language Java (une classe, interface, package, ...) tandis qu'un `TypeMirror` représentera un usage d'un élément dans un autre (le type d'un propriété, un paramètre, ...).

=== organisation de l'exercice

Dans le répertoire `exo1` se trouve un projet Maven organisé comme suit.

==== un package et une classe explorer par étape

Dans les sources, 4 packages (un par étape) se composent d'une classe "explorer", qui définie des méthodes vides, et d'une classe "à explorer". Il existe un test unitaire pour chaque classe "explorer".

Chaque classe "explorer" est conçue pour vous faire explorer l'API qui modélise le code source Java par petits bouts. Ainsi, l'implémentation des méthodes restera courte (souvent une ligne, au plus une dizaine).
Les méthodes sont également ordonnées pour vous guider (vous utiliserez parfois une méthode précédente pour implémenter la méthode courante).

==== faire passer les tests au vert

L'objectif de l'exercice est de faire passer progressivement tous les tests au vert en écrivant l'implémentation des méthodes vides. Ainsi, si vous lancez le build du projet, tous les tests échouent (`mvn clean install`).

==== javadoc

L'objectif, le résultat attendu et des indices sont présentés dans la javadoc de chaque méthode. Si votre IDE le permet, vous pourrez consulter les documentations des classes et interface de l'API directement dans les sources.

Sinon, il vous sera utile d'ouvrir la javadoc du package (TODO lien pkg element et type) hors ligne dans votre navigateur.

==== solution

La solution des exercices est disponible dans le code, dans les tests unitaires.

Libre à vous d'aller regarder les classes `DontLookAtThisClass` de chaque package si vous vous trouvez bloqués mais prenez le temps de chercher, on apprends beaucoup mieux par soi-même.

=== étape 1: nom(s), package et attribut(s)

La première étape consiste à découvrir comment récupérer les noms (simple et qualifié), le package et les attributs d'une classe à partir de l' `Element` qui le représente. A cette étape, on fait également un petit écart pour aller explorer l'usage des Visitor pour connaitre le sous type exacte d'un `Element` à l'exécution.

[IMPORTANT]
====
Ecrivez les implémentations des méthodes de la classe `fr.devoxx.niveau2.exo1.etape1.ClassDeclarationExplorer`.

A l'exception (notable) de la méthode `asTypeElement(Element)`, toutes ces méthodes s'écrivent en une ligne.

L'objectif de la méthode `asTypeElement(Element)` est de vous faire découvrir l'usage du pattern visiteur conseillé pour exploiter l'API (plutôt que l'usage de `instanceof` et de casts).
====

=== étape 2: annotation(s)

La seconde étape consiste à découvrir comment récupérer les annotations, et leurs valeurs, d'une classe à partir du `Element` qui la représente.

[IMPORTANT]
====
Ecrivez les implémentations des méthodes de la classe `fr.devoxx.niveau2.exo1.etape2.ClassAnnotationsExplorer`.

Toutes ces méthodes s'écrivent en une ligne.
====

=== étape 3: interface(s)

La troisième étape a pour obectif de faire découvrir la récupération des interfaces déclarées par une classe (ici `fr.devoxx.niveau2.exo1.etape3.ImplementsInterfacesClass`).

[IMPORTANT]
====
Ecrivez les implémentations des méthodes de la classe `fr.devoxx.niveau2.exo1.etape3.ClassInterfacesExplorer`.

L'implémentation de ces méthodes peut paraître plus complexe mais elles peuvent tout de même s'écrire très succinctement si on fait bon usage d'un stream et de courtes lambdas.
====

=== étape 4: super classe

La quatrième étape a pour obectif de faire découvrir la récupération de la super classe d'une classe (ici `fr.devoxx.niveau2.exo1.etape4.MyListClass`). A cette étape, on fait également un petit écart pour aller explorer l'usage des Visitor pour connaitre le sous type exacte d'un `TypeMirror` à l'exécution.

[IMPORTANT]
====
Ecrivez les implémentations des méthodes de la classe `fr.devoxx.niveau2.exo1.etape4.ClassSuperClassExplorer`.
====
